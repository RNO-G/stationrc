//////////////////////////////////////////////////////////////////////////////////////////////////////
// Main configuration file for rno-g-acq (typically /rno-g/cfg/acq.cfg is used)
// This file is in libconfig format, though your syntax highligher might mistake it for json
// Changing values in this file may adversely affect the operation of the DAQ.
// If you don't know what you're doing now would be a good time to exit your text editor. 
//////////////////////////////////////////////////////////////////////////////////////////////////////

//RADIANT configuration
radiant:
{
	//Scalers configuration
	scalers:
	{
		//use PPS, otherwise period is used
		use_pps=1;
		//The period used for scalers if PPS is not enabled
		period=1;
		//The prescaler minus 1 for each channel
		prescal_m1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	};

	//Threshold initialization configuration
	thresholds:
	{
		//1 to load from threshold file, otherwise initial values will be used
		load_from_threshold_file=1;
		//Initial thresholds if not loaded from file (in V)
		initial=[1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05,1.05];
		//Minimum allowed threshold, in V
		min=0.5;
		//Maximum allowed threshold, in V
		max=1.45;
	};

	//Threshold servo configuration
	servo:
	{
		//Enable servoing of RADIANT thresholds
		enable=1;
		//Time interval (in seconds) that scalers are updated at
		scaler_update_interval=0.5;
		//Time interval (in seconds) that thresholds are updated at
		servo_interval=1;
		//Multiple time periods may be considered in servoing. This sets the length of each time period (3 periods must be defined)
		nscaler_periods_per_servo_period=[1,2,3];
		//The weights of the aforementioned periods. For scaler goal to mean something sensible, these should add to 1.
		period_weights=[1,0,0];
		//The scaler goal for each channel (calculated as the weighted contribution of periods)
		scaler_goals=[5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5];
		//The maximum amount the threshold can change by in each step
		max_thresh_change=0.01;
		//servo PID loop P
		P=5;
		//servo PID loop I
		I=0;
		//servo PID loop D
		D=0;
		//Maximum allowed error sum (in Hz)
		max_sum_err=10000;
	};

	//Trigger configuration
	trigger:
	{
		//Software trigger configuration
		soft:
		{
			//Enable soft trigger
			enabled=1;
			//Use exponential distribution of inter-soft trigger timing
			use_exponential_distribution=0;
			//Soft trigger interval
			interval=10;
			//Jitter (uniform) on soft trigger interval
			interval_jitter=0;
			//Enable output for soft trigger
			output_enabled=0;
		};

		//External (Low-threshold!) trigger configuration
		ext:
		{
			//Enable ext trigger (note: this is the low threshold trigger!)
			enabled=1;
		};

		//PPS trigger configuration
		pps:
		{
			//Enable PPS trigger
			enabled=0;
			//Enable PPS trigger output
			output_enabled=0;
		};

		//First RF trigger configuration
		RF0:
		{
			//Enable this RF trigger
			enabled=1;
			//Mask of channels that go into this trigger
			mask=0x92000;
			//The time window (in ns) for the coincidence  trigger
			window=50;
			//Number of coincidences (min 1) in this coincidence trigger
			num_coincidences=2;
		};

		//Second RF trigger configuration
		RF1:
		{
			//Enable this RF trigger
			enabled=1;
			//Mask of channels that go into this trigger
			mask=0x16d000;
			//The time window (in ns) for the coincidence  trigger
			window=50;
			//Number of coincidences (min 1) in this coincidence trigger
			num_coincidences=2;
		};

		//Enable clear mode (don't...)
		clear_mode=0;
		//Enable trigger output
		output_enabled=1;
	};

	//Readout settings for the RADIANT
	readout:
	{
		//Mask of channels to read (0xffffff for all)
		readout_mask=0xffffff;
		//The number of 1024-sample buffers per readout. Use 1 or 2...
		nbuffers_per_readout=2;
		//Timeout in ms for gpio poll (higher reduces CPU, but reduces soft trigger granularity
		poll_ms=10;
	};

	//Pedestal settings for RADIANT
	pedestals:
	{
		//Compute pedestals at start of run
		compute_at_start=1;
		//Number of triggers used to compute pedetsal
		ntriggers_per_computation=512;
		//Apply attenuation when computing pedestals
		apply_attenuation=1;
		//Amount of attenuation to apply when computing pedestals
		attenuation=31.75;
		//File to load / store pedestals from / to
		pedestal_file="/rno-g/var/peds.dat";
		//Subtract pedestals from waveforms
		pedestal_subtract=1;
		//Number of internal triggers taken at once during pedestals (or bias scans)
		ntriggers_per_cycle=1;
		//Time to sleep (in seconds) between ntriggers_per_cycle. Typical values might be 1e-6 to 1e-2.
		sleep_per_cycle=0.001;
	};

	//Analog settings for the RADIANT
	analog:
	{
		//Apply lab4 vbias at beginning of run (instead of using whatever it is)
		apply_lab4_vbias=1;
		//The lab4 vbias (in V) to apply
		lab4_vbias=[1.5,1.5];
		//Apply diode vbias at beginning of run (instead of using whatever it is)
		apply_diode_vbias=0;
		//The diode vbias (in V) to apply
		diode_vbias=[1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25];
		//Apply attenuations to digitizer/trigger paths
		apply_attenuations=1;
		//Digitizer path attenuations (dB)
		digi_attenuation=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		//Trigger path attenuations (dB)
		trig_attenuation=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		//Time to wait after setting analog settings
		settle_time=0.5;
	};

	//RADIANT other device settings
	device:
	{
		//Script to reset the radiant (not implemented yet, so this is merely aspirational)
		reset_script="/rno-g/bin/reset-radiant";
		//SPI device for RADIANT DMA
		spi_device="/dev/spidev0.0";
		//UART device for RADIANT and RADIANT controller communications
		uart_device="/dev/ttyRadiant";
		//gpio to poll on for new DMA transfers
		poll_gpio=46;
		//gpio to enable SPI (use negative value for active low)
		spi_enable_gpio=-61;
	};

	//RADIANT pps settings
	pps:
	{
		//Use internal PPS instead of from GPS
		use_internal=0;
		// Enable sync out
		sync_out=0;
		//Amount of PPS holdoff (in some units...) for debouncing (I think?)
		pps_holdoff=10;
	};

	//Bias Scan Settings
	bias_scan:
	{
		//Enable bias scan
		enable_bias_scan=0;
		//If >1, will only do a bias scan when run % skip_runs == 0
		skip_runs=13;
		//Start DAC value (in adc) for bias scan
		min_val=0;
		//DAC step value (in adc) for bias scan
		step_val=16;
		//DAC step value (in adc) for bias scan
		max_val=3072;
		//Number of averages per step
		navg_per_step=512;
		//Number of seconds to sleep to settle
		sleep_time=1;
		//Apply Attenuation during bias scan
		apply_attenuation=1;
		//Attenuation to apply during bias scan
		attenuation=31.75;
	};

};

//Settings for the low-threshold (FLOWER) board
lt:
{
	//Trigger settings for the low-threshold-board
	trigger:
	{
		//Enable the LT RF trigger (currently a coincidence trigger)
		enable_rf_trigger=1;
		// Vpp threshold  (max 255) for RF Trigger
		vpp=1;
		//Minimum coincidence threshold for channels (minimum 1) for RF trigger
		min_coincidence=2;
		//Coincidence window for RF trigger
		window=5;
		//Send RF trigger to SMA out
		enable_rf_trigger_sma_out=0;
		//Send RF trigger to system out (i.e. to RADIANT)
		enable_rf_trigger_sys_out=1;
		//Send PPS trigger to SMA out
		enable_pps_trigger_sma_out=0;
		//Send PPS trigger to system out (i.e. to RADIANT)
		enable_pps_trigger_sys_out=0;
		//The delay, in microseconds,of the PPS trigger relative to the GPS second. Will reounded to nearest 0.1 us. Can be negative to subtrract off from best estimate of current clock rate.
		pps_trigger_delay=0;
	};

	//Threshold settings for the low-threshold board
	thresholds:
	{
		//Load thresholds from threshold file (if available)
		load_from_threshold_file=1;
		//Initial thresholds if not loaded from file (in ADC)
		initial=[30,30,30,30];
	};

	//Servo settings for the low-threshold board
	servo:
	{
		//Enable servoing
		enable=1;
		//Subtract gated scalers
		subtract_gated=0;
		//
		scaler_goals=[2500,2500,2500,2500];
		//The servo threshold is related to the trigger threshold by a fraction and offset
		servo_thresh_frac=0.95;
		//The servo threshold is related to the trigger threshold by a fraction and offset
		servo_thresh_offset=0;
		//Weight of fast (1Hz?) scalers in calculating PID goal
		fast_scaler_weight=0.3;
		//Weight of slow (10Hz?) scalers in calculating PID goal
		slow_scaler_weight=0.7;
		//How often we update the scalers
		scaler_update_interval=0.5;
		//How often we run the scaler
		servo_interval=1;
		//PID loop P term
		P=0.0002;
		//PID loop I term
		I=0;
		//PID loop D term 
		D=0;
	};

	//Settings related to HMCAD1511 gain
	gain:
	{
		//Automatically use HMCAD1511 gain to equalize channels
		auto_gain=1;
		//Target RMS (in adc) for normalization
		target_rms=5;
		//If not using auto gain, give us the gain codes (see datasheet)
		fixed_gain_codes=[5,5,5,5];
	};

	//Settings related to device interface
	device:
	{
		//The SPI device for the low-threshold board
		spi_device="/dev/spidev1.0";
		//gpio to enable SPI device
		spi_enable_gpio=0;
		//Require the low-threshold board to be detected for the DAQ to function. Turn this to 0 if you don't need it (usually for test-bench?).
		required=1;
	};

};

//Runtime settings
runtime:
{
	//The file holding the current daqstatus
	status_shmem_file="/rno-g/run/daqstatus.dat";
	//acq circular buffer size (temporarily stores events between acquisition and writing to disk)
	acq_buf_size=256;
	//monitoring circular buffer size (temporarily stores daqstatus between recording and writing to disk)
	mon_buf_size=128;
};

//Output settings
output:
{
	//Base directory for writing out data
	base_dir="/data/daq/";
	//The file used to persist the run
	runfile="/rno-g/var/runfile";
	//A human-readable comment that you can fill what whatever hopefully useful comment (or, an excuse not to take good notes?)
	comment="";
	//Interval that daqstatus is written out. Some things are measured on this cadence  (e.g. calpulser temperature, radiant voltages) 
	daqstatus_interval=1;
	//Number of seconds per run
	seconds_per_run=7200;
	//Maximum number of events per event (and header) file, or 0 to ignore
	max_events_per_file=100;
	//Maximum daqstatuses per daqstatus file, or 0 to ignore
	max_daqstatuses_per_file=100;
	//Maximum seconds per file (or 0 to ignore)
	max_seconds_per_file=60;
	//Maximum kB per file (or 0 to ignore), not including any compression
	max_kB_per_file=0;
	//Minimum free space on the partition where data gets stored. 
	min_free_space_MB_output_partition=512;
	//Minimum free space on the partition where the runfile gets stored
	min_free_space_MB_runfile_partition=64;
	//Allow overwriting output directories (only effective if there's a runfile)
	allow_rundir_overwrite=0;
	//Interval for printing a bunch of stuff to a screen nobody will see. Ideally done in green text with The Matrix font...
	print_interval=5;
};

//In-situ Calibration settings
calib:
{
	//Enable in-situ pulser
	enable_cal=0;
	//the calpulser i2c-bus
	i2c_bus=2;
	//the calpulser control gpio
	gpio=49;
	//the board revision (e.g. D or E), or the absolute path to the name of a file containing the board revision
	rev="/REV";
	//in-situ calpulser channel [ valid values:  "none"  "coax"  "fiber0"  "fiber1" ]
	channel="none";
	//in-situ calpulser type [ valid values:  "none"  "pulser"  "vco"  "vco2" ]
	type="none";
	//Attenuation in dB (max 31.5, in steps of 0.5 dB)
	atten=31.5;
	//Attenuation sweep settings
	sweep:
	{
		//Enable sweeping of calpulser attenuation
		enable=0;
		//Start attenuation of sweep
		start_atten=31.5;
		//Stop attenuation of sweep
		stop_atten=0;
		//Attenuation step of sweep
		atten_step=0.5;
		//Length of step, in seconds
		step_time=100;
	};

};

